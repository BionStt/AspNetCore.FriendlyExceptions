<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp1.1</TargetFramework>
    <PackageId>AspNetCore.FriendlyExceptions</PackageId>
    <Authors>abergs, semack</Authors>
    <Company>ONLINICO</Company>
    <Product>AspNetCore.FriendlyExceptions</Product>
    <Version>0.0.1$(VersionSuffix)</Version>
    <AssemblyName>AspNetCore.FriendlyExceptions</AssemblyName>
    <RootNamespace>AspNetCore.FriendlyExceptions</RootNamespace>
    <GeneratePackageOnBuild>False</GeneratePackageOnBuild>
    <PackageLicenseUrl>https://github.com/semack/AspNetCore.FriendlyExceptions/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/semack/AspNetCore.FriendlyExceptions</PackageProjectUrl>
    <RepositoryUrl>https://github.com/semack/AspNetCore.FriendlyExceptions.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>middleware asp-net-core asp-net-core-web-api asp-net-core-mvc exception-handling</PackageTags>
    <PackageReleaseNotes>Adeed possibility to use ExceptionFilter without callingTypeFilter()</PackageReleaseNotes>
    <AssemblyVersion>0.0.1$(VersionSuffix)</AssemblyVersion>
    <Copyright>Copyright ©2015-2017 Anders Åberg, Andriy S'omak</Copyright>
    <Summary>ASP.NET Core Friendly Exceptions Filter and Middleware.</Summary>
    <Description>A filter and middleware that can translate exceptions into nice http resonses. This allows you to throw meaningfull exceptions from your framework, business code or other middlewares and translate the exceptions to nice and friendly http responses.</Description>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Transforms\Interfaces\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Http.Abstractions" Version="1.1.0" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Core" Version="1.1.0" />
    <PackageReference Include="Microsoft.Extensions.Options" Version="1.1.0" />
  </ItemGroup>

</Project>
